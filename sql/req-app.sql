-- README : Lorsque qu'un nom commence par un $, il s'agit d'une variable d'input que java doit fournir !
----------------------------------------------------------------------------------------------------------

-- Créer une commande 
--- Type : ID_COMMAND(INT),ID_LOGIN(INT),STATE(INT),DATE_COMMAND(String "mm-dd-yyyy"),TABL(INT)
--- Input à la fonction Java : ID_COMMAND (?), ID_LOGIN, STATE, DATE_COMMAND, TABL
--- Ouput à la fonction Java : void (rien)
INSERT INTO COMMAND VALUES ($ID_COMMAND, $ID_LOGIN, $STATE, $DATE_COMMAND, $TABL);

-- Passer le statut de non payé à payé d'une commande
-- Input : ID_COMMAND
-- Output : void
UPDATE COMMAND
SET STATE=0
WHERE ID_COMMAND= $ID_COMMAND

-- Calcul des factures pour une table
-- INPUT : COMMAND.TABL
-- OUTPUT : Float
SELECT SUM(ROUND(PRODUIT.PRIX*QUANTITY.QUANTITY,2)) AS Total
FROM COMMAND, PRODUIT, QUANTITY
WHERE COMMAND.STATE != 0 AND PRODUIT.ID_PROD = QUANTITY.ID_PROD AND COMMAND.ID_COMMAND = QUANTITY.ID_COMMAND AND COMMAND.TABL = $COMMAND.TABL

-- Calcul de facture par user (pour une table)
-- INPUT : COMMAND.ID_TABL, USER.ID_LOGIN
-- OUTPUT : Float
SELECT SUM(ROUND(PRODUIT.PRIX*QUANTITY.QUANTITY,2)) AS Total
FROM COMMAND, PRODUIT, QUANTITY, USER
WHERE COMMAND.STATE != 0 AND PRODUIT.ID_PROD = QUANTITY.ID_PROD AND COMMAND.ID_COMMAND = QUANTITY.ID_COMMAND AND COMMAND.ID_LOGIN = $USER.ID_LOGIN AND COMMAND.ABL = $COMMAND.TABL

-- Détail de la facture pour chaque table (ofc non payé)
-- INPUT : COMMAND.TABL
-- OUTPUT : Tableau 3 colonnes de float [ID_PRODUIT, QUANTITE, PRIX PAR PRODUIT*QUANTITE]
SELECT PRODUIT.ID_PROD, QUANTITY.QUANTITY, SUM(ROUND(PRODUIT.PRIX*QUANTITY.QUANTITY,2))
FROM COMMAND, PRODUIT, QUANTITY
WHERE COMMAND.ID_COMMAND = QUANTITY.ID_COMMAND AND QUANTITY.ID_PROD = PRODUIT.ID_PROD AND COMMAND.TABL = $COMMAND.TABL AND COMMAND.STATE != 0
GROUP BY PRODUIT.ID_PROD


